<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="www.api.tsk.task.Task">

    <!-- 공통 where 템플릿(필요 시 활성화) -->
    <sql id="whereTask">
        <!-- 예시
        <if test="grpCd != null and grpCd != ''">
            AND GRP_CD = #{grpCd}
        </if>
        <if test="statusCd != null and statusCd != ''">
            AND STATUS_CD = #{statusCd}
        </if>
        -->
    </sql>

    <!-- 목록: 시간(분) 기준 오름차순 + TODO 우선 + NULL 시간은 마지막 -->
    <select id="selectTaskList" parameterType="map" resultType="CamelHashMap">
        /*
         SQL ID: www.api.tsk.task.Task.selectTaskList
         Description : 목록 Query (시간 정렬)
        */
        SELECT
            TASK_ID,
            GRP_CD,
            TITLE,
            CONTENT,
            STATUS_CD,
            PRIORITY_CD,
            DATE_FORMAT(START_DT,  '%Y-%m-%d %H:%i:%s') AS START_DT,
            DATE_FORMAT(DUE_DT,    '%Y-%m-%d %H:%i:%s') AS DUE_DT,
            DATE_FORMAT(DONE_DT,   '%Y-%m-%d %H:%i:%s') AS DONE_DT,
            SORT_ORDR,
            USE_AT,
            DATE_FORMAT(CREATED_DT,'%Y-%m-%d %H:%i:%s') AS CREATED_DT,
            DATE_FORMAT(UPDATED_DT,'%Y-%m-%d %H:%i:%s') AS UPDATED_DT
        FROM TB_TASK
        <where>
            USE_AT = 'Y'
            <include refid="whereTask" />
        </where>
        ORDER BY
            CASE WHEN STATUS_CD = 'DONE' THEN 1 ELSE 0 END ASC,   /* TODO 먼저 */
            CASE WHEN DUE_DT IS NULL  THEN 1 ELSE 0 END ASC,      /* NULL 시간 뒤로 */
            DUE_DT ASC,                                           /* 시간 오름차순 */
            SORT_ORDR ASC,
            TASK_ID DESC
        <if test="limit != null and offset != null">
            LIMIT #{limit} OFFSET #{offset}
        </if>
    </select>

    <!-- 카운트 -->
    <select id="selectTaskListCount" parameterType="hashmap" resultType="int">
        SELECT COUNT(*) CNT
        FROM TB_TASK
        <where>
            USE_AT = 'Y'
            <include refid="whereTask" />
        </where>
    </select>

    <!-- 상세: taskId 또는 taskNo(호환) 모두 수용 -->
    <select id="selectTaskDetail" parameterType="map" resultType="CamelHashMap">
        /*
         SQL ID: www.api.tsk.task.Task.selectTaskDetail
         Description : 상세조회 Query (taskId 우선, 없으면 taskNo)
        */
        SELECT
            TASK_ID,
            GRP_CD,
            TITLE,
            CONTENT,
            STATUS_CD,
            PRIORITY_CD,
            DATE_FORMAT(START_DT,  '%Y-%m-%d %H:%i:%s') AS START_DT,
            DATE_FORMAT(DUE_DT,    '%Y-%m-%d %H:%i:%s') AS DUE_DT,
            DATE_FORMAT(DONE_DT,   '%Y-%m-%d %H:%i:%s') AS DONE_DT,
            SORT_ORDR,
            USE_AT,
            DATE_FORMAT(CREATED_DT,'%Y-%m-%d %H:%i:%s') AS CREATED_DT,
            DATE_FORMAT(UPDATED_DT,'%Y-%m-%d %H:%i:%s') AS UPDATED_DT
        FROM TB_TASK
        <where>
            <choose>
                <when test="taskId != null and taskId != ''">
                    TASK_ID = #{taskId}
                </when>
                <when test="taskNo != null and taskNo != ''">
                    TASK_ID = #{taskNo}
                </when>
                <otherwise>
                    1 = 0
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- 등록: YYYY-MM-DDTHH:mm(:ss) 수용 -->
    <insert id="insertTask" parameterType="hashmap">
        /*
         SQL ID: www.api.tsk.task.Task.insertTask
         Description : 등록 Query (시간 포함)
        */
        INSERT INTO TB_TASK
        (
            GRP_CD, TITLE, CONTENT, STATUS_CD, PRIORITY_CD,
            START_DT, DUE_DT, DONE_DT,
            SORT_ORDR, USE_AT, CREATED_DT, UPDATED_DT
        )
        VALUES
        (
            #{grpCd},
            #{title},
            <![CDATA[ #{content} ]]>,
            COALESCE(NULLIF(#{statusCd}, ''), 'TODO'),
            NULLIF(#{priorityCd}, ''),
            /* START_DT */
            STR_TO_DATE(NULLIF(
                CONCAT(
                    REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{startDt}, 'T',' '), '.', 1),'Z',''),'T',' '),
                    CASE WHEN LENGTH(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{startDt}, 'T',' '), '.', 1),'Z',''),'T',' '))=16 THEN ':00' ELSE '' END
                ), ''
            ), '%Y-%m-%d %H:%i:%s'),
            /* DUE_DT */
            STR_TO_DATE(NULLIF(
                CONCAT(
                    REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{dueDt}, 'T',' '), '.', 1),'Z',''),'T',' '),
                    CASE WHEN LENGTH(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{dueDt}, 'T',' '), '.', 1),'Z',''),'T',' '))=16 THEN ':00' ELSE '' END
                ), ''
            ), '%Y-%m-%d %H:%i:%s'),
            /* DONE_DT */
            STR_TO_DATE(NULLIF(
                CONCAT(
                    REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{doneDt}, 'T',' '), '.', 1),'Z',''),'T',' '),
                    CASE WHEN LENGTH(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{doneDt}, 'T',' '), '.', 1),'Z',''),'T',' '))=16 THEN ':00' ELSE '' END
                ), ''
            ), '%Y-%m-%d %H:%i:%s'),
            NULLIF(#{sortOrdr}, ''),
            COALESCE(NULLIF(#{useAt}, ''), 'Y'),
            COALESCE(STR_TO_DATE(NULLIF(
                CONCAT(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{createdDt}, 'T',' '), '.', 1),'Z',''),'T',' '),
                CASE WHEN LENGTH(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{createdDt}, 'T',' '), '.', 1),'Z',''),'T',' '))=16 THEN ':00' ELSE '' END), ''
            ), '%Y-%m-%d %H:%i:%s'), NOW()),
            COALESCE(STR_TO_DATE(NULLIF(
                CONCAT(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{updatedDt}, 'T',' '), '.', 1),'Z',''),'T',' '),
                CASE WHEN LENGTH(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{updatedDt}, 'T',' '), '.', 1),'Z',''),'T',' '))=16 THEN ':00' ELSE '' END), ''
            ), '%Y-%m-%d %H:%i:%s'), NOW())
        )
    </insert>

    <!-- 수정: 시간 포함 -->
    <update id="updateTask" parameterType="hashmap">
        /*
         SQL ID: www.api.tsk.task.Task.updateTask
         Description : 수정 Query (TASK_ID 기준, 시간 포함)
        */
        UPDATE TB_TASK
        <set>
            <if test='grpCd != null and grpCd != ""'>       GRP_CD = #{grpCd}, </if>
            <if test='title != null and title != ""'>       TITLE = #{title}, </if>
            <if test='content != null and content != ""'>   CONTENT = <![CDATA[ #{content} ]]>, </if>
            <if test='statusCd != null and statusCd != ""'> STATUS_CD = #{statusCd}, </if>
            <if test='priorityCd != null and priorityCd != ""'> PRIORITY_CD = #{priorityCd}, </if>

            <if test='startDt != null and startDt != ""'>
                START_DT = STR_TO_DATE(NULLIF(CONCAT(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{startDt}, 'T',' '), '.', 1),'Z',''),'T',' '),
                CASE WHEN LENGTH(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{startDt}, 'T',' '), '.', 1),'Z',''),'T',' '))=16 THEN ':00' ELSE '' END), ''), '%Y-%m-%d %H:%i:%s'),
            </if>
            <if test='dueDt != null and dueDt != ""'>
                DUE_DT = STR_TO_DATE(NULLIF(CONCAT(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{dueDt}, 'T',' '), '.', 1),'Z',''),'T',' '),
                CASE WHEN LENGTH(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{dueDt}, 'T',' '), '.', 1),'Z',''),'T',' '))=16 THEN ':00' ELSE '' END), ''), '%Y-%m-%d %H:%i:%s'),
            </if>
            <if test='doneDt != null and doneDt != ""'>
                DONE_DT = STR_TO_DATE(NULLIF(CONCAT(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{doneDt}, 'T',' '), '.', 1),'Z',''),'T',' '),
                CASE WHEN LENGTH(REPLACE(REPLACE(SUBSTRING_INDEX(REPLACE(#{doneDt}, 'T',' '), '.', 1),'Z',''),'T',' '))=16 THEN ':00' ELSE '' END), ''), '%Y-%m-%d %H:%i:%s'),
            </if>

            <if test='sortOrdr != null and sortOrdr != ""'> SORT_ORDR = #{sortOrdr}, </if>
            <if test='useAt != null and useAt != ""'>       USE_AT = #{useAt}, </if>

            UPDATED_DT = NOW()
        </set>
        WHERE TASK_ID = #{taskId}
    </update>

    <!-- Soft Delete -->
    <update id="softDeleteTask" parameterType="hashmap">
        UPDATE TB_TASK
        SET USE_AT = 'N', UPDATED_DT = NOW()
        WHERE TASK_ID = #{taskId}
    </update>

    <!-- 하드 Delete (옵션) -->
    <delete id="deleteTask" parameterType="hashmap">
        DELETE FROM TB_TASK
        WHERE TASK_ID = #{taskId}
    </delete>

    <!-- 날짜별 목록: 시간 정렬 + TODO 우선 + NULL 시간 뒤로 -->
    <select id="selectTaskListByDate" parameterType="map" resultType="CamelHashMap">
        /*
         SQL ID: www.api.tsk.task.Task.selectTaskListByDate
         Description : 선택한 날짜(YYYY-MM-DD)의 Task 목록 (시간 정렬)
        */
        SELECT
            TASK_ID,
            GRP_CD,
            TITLE,
            CONTENT,
            STATUS_CD,
            PRIORITY_CD,
            DATE_FORMAT(START_DT,  '%Y-%m-%d %H:%i:%s') AS START_DT,
            DATE_FORMAT(DUE_DT,    '%Y-%m-%d %H:%i:%s') AS DUE_DT,
            DATE_FORMAT(DONE_DT,   '%Y-%m-%d %H:%i:%s') AS DONE_DT,
            SORT_ORDR,
            USE_AT,
            DATE_FORMAT(CREATED_DT,'%Y-%m-%d %H:%i:%s') AS CREATED_DT,
            DATE_FORMAT(UPDATED_DT,'%Y-%m-%d %H:%i:%s') AS UPDATED_DT
        FROM TB_TASK
        WHERE USE_AT = 'Y'
          <if test="grpCd != null and grpCd != ''">
            AND GRP_CD = #{grpCd}
          </if>
          AND (
            (#{dueDate} IS NULL AND DATE(DUE_DT) = CURRENT_DATE())
            OR (#{dueDate} IS NOT NULL AND DATE(DUE_DT) = #{dueDate})
          )
        ORDER BY
            CASE WHEN STATUS_CD = 'DONE' THEN 1 ELSE 0 END ASC,
            CASE WHEN DUE_DT IS NULL  THEN 1 ELSE 0 END ASC,
            DUE_DT ASC,
            SORT_ORDR ASC,
            TASK_ID DESC
    </select>

    <!-- 상태 토글 -->
    <update id="toggleTaskStatus" parameterType="hashmap">
        /*
         SQL ID: www.api.tsk.task.Task.toggleTaskStatus
         Description : 체크박스 상태 토글(TODO↔DONE)
        */
        UPDATE TB_TASK
        SET
            STATUS_CD = #{statusCd},
            DONE_DT   = (CASE WHEN #{statusCd} = 'DONE' THEN NOW() ELSE NULL END),
            UPDATED_DT = NOW()
        WHERE TASK_ID = #{taskId}
          AND USE_AT = 'Y'
    </update>

</mapper> 